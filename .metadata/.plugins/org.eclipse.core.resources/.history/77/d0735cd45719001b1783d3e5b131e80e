package trelloServer;

import java.io.IOException;
import java.rmi.*;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.*;
import java.util.ArrayList;
import java.util.Scanner;

import trello.*;

/**
 * TrelloServer
 * 
 * @implements TrelloServerInterface
 *
 */
public class TrelloServer extends UnicastRemoteObject implements TrelloServerInterface
{

	private static final long serialVersionUID = -7496452202861199863L;

	private ArrayList<User> users;

	/**
	 * @throws RemoteException
	 */
	public TrelloServer() throws RemoteException
	{
		// Load the users and the boards from the XML files on the disk
		users = User.deserializeFromXML();
	}

	/**
	 * @param name     - Name of the user to authenticate
	 * @param password - Password of the user to authenticate
	 * @return the authenticated user
	 * @throws RemoteException, UserNotFoundException
	 */
	@Override
	public User authenticateUser(String name, String password) throws RemoteException, UserNotFoundException
	{
		// Loop through all of our users and find the user
		for (User u : users)
			if (u.getName().equals(name))
				if (u.login(name, password))
					return u;
				else
					return null; // Unable to authenticate the user, return nothing

		// If we get here, there's no user that exists with the credentials
		throw new UserNotFoundException("User " + name + " not found");
	}

	/**
	 * @param name      - Name of the board to create
	 * @param requester - User requesting the new board
	 * @return the newly created board
	 * @throws RemoteException
	 */
	@Override
	public Board createBoard(String name, User requester) throws RemoteException
	{
		// Create a new board and return it
		// The requester will be the owner of the board
		Board newBoard = new Board(name, requester);
		
		// Save the users to XML
		User.serializeToXML(users);

		return newBoard;
	}

	/**
	 * @param name      - Name of the board to retrieve
	 * @param requester - User requesting the board
	 * @throws RemoteException, BoardNotFoundException
	 */
	@Override
	public Board getBoard(String name, User requester) throws RemoteException, BoardNotFoundException
	{
		// Let's look at all of the boards in memory, and find the one with the
		// name that is requested
		for (Board b : requester.getBoards())
			if (b.getName().equals(name))
				return b;

		// If no board was found, let's throw an exception
		throw new BoardNotFoundException("Board, " + name + " not found");
	}

	/**
	 * @param oldBoard  - The old board object
	 * @param newBoard  - The new board object to replace the old board
	 * @param requester - The person requesting that the board be updated
	 * @return whether or not the update was successful
	 * @throws RemoteException, BoardNotFoundException
	 */
	@Override
	public boolean updateBoard(Board oldBoard, Board newBoard, User requester)
			throws RemoteException, BoardNotFoundException
	{
		// First, make sure the requester is a member of the board
		if (! oldBoard.hasMember(requester))
			return false;
		
			// It's here, so replace it and return true
			if (requester.removeBoard(oldBoard))
			{
				requester.removeBoard(oldBoard);
				requester.addBoard(newBoard);
				
				// Save the users to XML
				User.serializeToXML(users);

				return true;
			}

		// If we get here, the board doesn't exist so throw an exception
		throw new BoardNotFoundException("Board, " + oldBoard.getName() + " not found for user " + requester.getName());
	}

	/**
	 * @param args
	 * 
	 *             Run with args[0] => Server name, args[1] => Server port number
	 * 
	 *             Ex: java TrelloServer [SERVER_NAME] [PORT_NUMBER (Default 1099)]
	 */
	public static void main(String[] args)
	{
		// Get the requested server name and port number
		String serverName = args[0];
		int portNumber = Integer.valueOf(args[1]);

		try
		{
			// Create the registry, server, and bind it
			Registry rmiregistry = LocateRegistry.getRegistry(portNumber);
			if (rmiregistry == null)
				rmiregistry = LocateRegistry.createRegistry(portNumber);

			TrelloServer server = new TrelloServer();
			rmiregistry.rebind(serverName, server);

			// Let them know the server is running
			System.out.println(serverName + " is running on RMI Registry port " + String.valueOf(portNumber) + "...\n");

			// Now, the server is started and we wait for the EOF key
			// CTRL + D
			Scanner inScanner = new Scanner(System.in);
			while (inScanner.hasNext())
				inScanner.nextLine();

			// Now, the user has ended the program
			// Close the scanner
			inScanner.close();

			// Close the server
			rmiregistry.unbind(serverName);

			System.out.println(serverName + " Closed\n");
		}
		catch (IOException | NotBoundException e)
		{
			e.printStackTrace();
		}

	}

}
